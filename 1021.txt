---10월 21일 빅데이터 수업----------------------

----------------------------------------------

튜플 
리스트와 유사한 집합적 자료형이지만 
리스트와 달리 원소 변경 불가 
추가 / 수정 / 삭제 불가능
소괄호를 사용해서 만든다

----------------------------------------------

#튜플 생성 (  ) 이용
t1 = (1,2,3)
t2 = 4,5,6 #소괄호 없어도 튜플로 생성이 된다 
t3 = t1,(7,8,9) #튜플 내에 또 다른 튜플 생성
t4 = [1,2], [4,5] #리스트로 튜플 생성
t5 = tuple([5,6,7,8]) #tuple 함수 사용 - 기존 구조(리스트)를 튜플로 변환
t6 = ([5,6,7,8]) #리스트 하나를 원소로 갖는 튜플

print(t4)
t4[0]
print(t5)

----------------------------------------------

#튜플을 리스트로 변환
#(1,2,3) -> [1,2,3]
to_list1 = list(t1)
to_list1

----------------------------------------------

#튜플 내 튜플 원소는 변환 후에도 그대로 튜플로 유지 
to_list2 = list(t3)
to_list2

#튜플은 변경할 수 없다
t=(1,2,3)
t[0] = 5 #에러발생 : 변경 불가 

#소괄호 없이 튜플을 생성할 때 원소가 1개인 튜플을 생성하는 방법
t8 = 2,
t8

----------------------------------------------

딕셔너리
키(key)와 값(value)의 한 쌍을 요소로 갖는 자료형
딕셔너리 = [키1:값1, 키2:값2]

딕셔너리의 특징
순서가 없다. 따라서, 인덱스로 접근할 수 없다
중괄호 {} 사용
key를 통해서만 접근

딕셔너리의 주요 함수

딕셔너리.keys() : key만 추출해서 리스트로 반환
딕셔너리.values() : values만 추출해서 리스트로 반환
딕셔너리.items() : (key,value)형태로 모든 item을 리스트로 반환

#딕셔너리에 값(item) 추가 
#딕셔너리 변수 [새로추가될 key] = 키에 대응하는 값

#딕셔너리 item 의 value에 접근
#딕셔너리명[키값]

#딕셔너리 예제
naver = {
    "name" : "naver",
    "url" : "www.naver.com",
    "userId" : "nv",
    "password" : "1234"
    
}
print(naver)
print(type(naver))

----------------------------------------------

----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
----------------------------------------------
