위 그래프는 각 구별 절대적인 cctv 대수를 이용해서 그린 그래프임
절대수치로 가장 높은 구는 강남구, 양천구, ㅓ초구 순으로 나타나고 있음

절대수치로 cctv 설치 대수가 낮은 구는 도봉구 마포구 송파구 순으로 나타나고 있다.

특이사항 강남권역에 속한 송파구가 cctv 절대수치가 낮게 표현됨

cctv 절대수와 인구수 간의 상관관계를 확인 했을 때 가장 상관이 높게 나타난 변수는 소계와 인구수 간의 관계였음

인구수 대비 cctv 가 많이 설치되어 있는 지역을 찾아볼것

# 데이터 확인 : data_result => cctv 데이터와 인구수 데이터를 병합해놓은 df
data_result.head()

#인구수 대비 cctv 설치비율 변수 생성
#변수명 : cctv 비율
data_result['cctv비율'] = data_result['소계']/data_result['인구수']*100

#cctv 비율이 높은 지역순으로 그래프 생성
data_result['cctv비율'].sort_values().plot(kind='barh',grid=True, figsize=(10,10))
plt.show()

인구수 대비 cctv 대수는 용산구와 종로구가 강남, 양천에 비해서 월등히 높다.
용산구와 종로구의 특징 : 주거지역이 적고, 유동인구가 많은 대표적인 지역
주거지역보다 상업지역에 cctv 설치 빈도가 높다는 것을 알 수 있다.

# 인구수와 cctv 절대 설치대수를 이용해서 분산그래프 그리기
# 분산 그래프 함수 : scatter() 사용
# 문법 : scatter(x 축 data, y축 데이터, 마커 크기 = n)

plt.figure(figsize=(6,6))
plt.scatter(data_result['인구수'], data_result['소계'], s= 50)
#X축 제목 : XLABEL(제목값)
plt.xlabel('인구수')
#Y축 제목 : YLABEL(제목값)
plt.ylabel('CCTV')
plt.grid()

데이터(cctv 대수와 인구수)를 대표하는 직선을 하나 그려서 대표값보다 높은곳에 위치하는 구와 낮은곳에 위치하는 구 표시
인구수와 cctv는 양의 상관 관계를 갖는다. 1차 함수 방정식을 이용해서 직선을 그려봄

최소 오차 직선식
polyfit(x,y,n) : y에 대한 x의 그래프에서 오차가 가장 적은 n차 방정식의 계수 반환 
cctv 대수에 대한 인구수의 그래프를 그릴때 필요한 1차방정식의 계수를 구해보자.

fp1 = np.polyfit(data_result['인구수'], data_result['소계'], 1)
fp1

# 지수 표현
# 1.30916415e-03 : 지수표현 0.00003 = 3.e-4
# 6.45066497e+02 == 645.0066497
# 인구가 10만 일때 적절한 cctv 대수는 얼마인가 ?
y = 0.001309146415*100000 + 645.066497

# 인구별 적절한 cctv 대수 값을 계산하기 위한 인구 데이터 생성
# 각 구별 인구수를 확인 했을 때 최소값과 최대값은 얼마인가 ??
data_result['인구수'] # 최대 최소 확인 후 10만에서 70만 사이의 그래프를 그림

# 10만부터 70만 사이의 동일 간격 100개의 수를 생성 
# linspace(최소값, 최대값, 발생할 수의 개수)

fx = np.linspace(100000,700000,100)
fx

#fp1 : 방정식 계수
#fx : 방정식에 사용할 x값
#방정식 함수를 생성 - poly1d(방정식 계수) 

f1 = np.poly1d(fp1) #f1은 방정식을 수행할 수 있는 함수가 생성되어 있음
#f1은 함수로 생성됨 : f1(x값)으로 사용 y 값 이 나옴
f1(fx)

#인구수 대비 cctv 대수 분산그래프를 그리고 대표 직선 그리기 
#대표 직선을 위한 data는 x값(인구수) : fx 변수 y값(cctv) : f1(fx)
plt.figure(figsize=(6,6))
plt.scatter(data_result['인구수'], data_result['소계'], s = 50)
#대표 직선 그래프 그리기 
plt.plot(fx, f1(fx), ls='dashed',lw=3, color='g')
#ls 는 선스타일 lw는 선 두께, color 선 색상 
plt.xlabel('인구수')
plt.ylabel('CCTV')
plt.grid()
plt.show()

위 그래프의 직선의 의미는 400000일때 적정 cctv 대수는 1200대 정도여야 적정-
직선보다 위쪽은 일반보다 많은 지역
직선보다 아래쪽은 일반보다 적게 설치된 지역

# 조금 더 설득력 있는 자료 만들기 
- 직선에서 멀어질수록 마커의 색상을 다르게 표현
- 직선과 멀리 있는 상위 10개를 선택해서 구 이름을 표시 

# 각 구별 적절한 cctv 대수를 계산해보자 
f1(data_result['인구수'])

#구별 인구수 대비 cctv 오차 계사(있어야 할 대수보다 얼마나 많고 적은지를 계산)

data_result['소계']-f1(data_result['인구수'])
#강남구등을 더 많이 설치


# 위에서 계산한 오차를 절대값으로 변환 후 상위 10 개 구 확인
# abs(값) : 절대값 반환
data_result['오차'] = np.abs(data_result['소계']-f1(data_result['인구수']))

data_result.head()
